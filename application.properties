# --------------------------------------------------------------------------------------------------------------------------------------
# KAFKA BROKER PROPERTIES
# --------------------------------------------------------------------------------------------------------------------------------------
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.properties.security.protocol=SASL_SSL
spring.kafka.properties.sasl.mechanism=OAUTHBEARER
spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.token.endpoint.uri="http://localhost:8080/realms/kafka-realm/protocol/openid-connect/token" \
  oauth.client.id="your-kafka-client-id" \
  oauth.client.secret="your-kafka-client-secret" \
  oauth.scope="your-kafka-scope" \
  ;

# --------------------------------------------------------------------------------------------------------------------------------------
# KAFKA CONSUMER PROPERTIES
# --------------------------------------------------------------------------------------------------------------------------------------  
spring.kafka.consumer.group-id=avro-consumer-group
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-offset-reset=earliest # or latest

# --------------------------------------------------------------------------------------------------------------------------------------
# KAFKA SCHEMA REGISTRY PROPERTIES
# -------------------------------------------------------------------------------------------------------------------------------------- 
# These properties are passed to the KafkaAvroDeserializer, which then uses them to configure its internal Schema Registry client.
spring.kafka.properties.schema.registry.url=http://localhost:8081
spring.kafka.properties.basic.auth.credentials.source=SASL_INHERIT
# Alternatively, if Schema Registry has its own separate OAuth config:
# spring.kafka.properties.basic.auth.user.info=OAuthBearer token_string_or_encoded_client_credentials
# Or, if using a separate Oauth configuration for Schema Registry:
# spring.kafka.properties.schema.registry.oauthbearer.token.endpoint.url=http://localhost:8080/realms/schema-registry-realm/protocol/openid-connect/token
# spring.kafka.properties.schema.registry.oauthbearer.client.id=your-sr-client-id
# spring.kafka.properties.schema.registry.oauthbearer.client.secret=your-sr-client-secret
# spring.kafka.properties.schema.registry.oauthbearer.scope=your-sr-scope
# Additional properties for Schema Registry if needed (e.g., if it uses a custom login callback)
# spring.kafka.properties.schema.registry.sasl.mechanism=OAUTHBEARER
# spring.kafka.properties.schema.registry.security.protocol=SASL_SSL

# --------------------------------------------------------------------------------------------------------------------------------------
# KAFKA CONSUMER SERIALIZE/DE-SERIALIZE
# -------------------------------------------------------------------------------------------------------------------------------------- 
spring.kafka.consumer.key-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer







